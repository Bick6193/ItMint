// <auto-generated />
using DAL.Context;
using DAL.Models;
using Domain.Authorization;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20171212165846_tt")]
    partial class tt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.ApiUser", b =>
                {
                    b.Property<string>("ClientId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("ApplicationType");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("RefreshTokenLifeTime");

                    b.Property<string>("Secret")
                        .IsRequired();

                    b.HasKey("ClientId");

                    b.ToTable("ApiUsers");
                });

            modelBuilder.Entity("DAL.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Email");

                    b.Property<bool>("ForceToResetPassword");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsAdministrative");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Position");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("DAL.Models.BinaryFileData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Content");

                    b.HasKey("Id");

                    b.ToTable("BinaryFilesData");
                });

            modelBuilder.Entity("DAL.Models.BinaryProjectFileData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Content");

                    b.Property<int?>("ProjectFileId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFileId");

                    b.ToTable("BinaryProjectFileDatas");
                });

            modelBuilder.Entity("DAL.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BinaryDataId");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("FileIndex");

                    b.Property<string>("FileName")
                        .HasMaxLength(255);

                    b.Property<int?>("RequestFormId");

                    b.Property<string>("RequestFormToken");

                    b.Property<int?>("RequestId");

                    b.HasKey("Id");

                    b.HasIndex("BinaryDataId")
                        .IsUnique();

                    b.HasIndex("RequestId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DAL.Models.Metadata", b =>
                {
                    b.Property<int>("MetaDataId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Author");

                    b.Property<string>("Controller");

                    b.Property<string>("Description");

                    b.Property<string>("Keywords");

                    b.Property<string>("Title");

                    b.HasKey("MetaDataId");

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("DAL.Models.ProjectFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DefaultFolder");

                    b.Property<string>("FileName");

                    b.Property<string>("ProjectId");

                    b.Property<int?>("ProjectId1");

                    b.Property<DateTime>("RevisionTime");

                    b.Property<string>("VersionFolder");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId1")
                        .IsUnique()
                        .HasFilter("[ProjectId1] IS NOT NULL");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("DAL.Models.Projects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("ProjectId");

                    b.Property<DateTime>("RevisionTime");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Projectses");
                });

            modelBuilder.Entity("DAL.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("Flag");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<int?>("RequestTypeId");

                    b.Property<string>("RequestTypeInString");

                    b.Property<string>("UserId");

                    b.Property<bool>("Viewed");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("DAL.Models.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<string>("EmployeesEmail");

                    b.Property<string>("EmployeesName");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("MessageBodyToCustomer");

                    b.Property<string>("MessageToCustomer");

                    b.Property<int>("OrderWeight");

                    b.Property<bool>("SendEmailToCustomer");

                    b.Property<bool>("SendEmailToEmployee");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("RequestsType");
                });

            modelBuilder.Entity("DAL.Models.Token", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken")
                        .IsRequired();

                    b.Property<DateTime>("AccessTokenExpiresUtc");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("IssuedUtc");

                    b.Property<string>("RefreshToken")
                        .IsRequired();

                    b.Property<DateTime>("RefreshTokenExpiresUtc");

                    b.Property<byte[]>("RowVersion");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("DAL.Models.BinaryProjectFileData", b =>
                {
                    b.HasOne("DAL.Models.ProjectFile", "ProjectFile")
                        .WithMany()
                        .HasForeignKey("ProjectFileId");
                });

            modelBuilder.Entity("DAL.Models.File", b =>
                {
                    b.HasOne("DAL.Models.BinaryFileData", "BinaryData")
                        .WithOne("File")
                        .HasForeignKey("DAL.Models.File", "BinaryDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Request", "Request")
                        .WithMany("Files")
                        .HasForeignKey("RequestId");
                });

            modelBuilder.Entity("DAL.Models.ProjectFile", b =>
                {
                    b.HasOne("DAL.Models.Projects", "Project")
                        .WithOne("ProjectFiles")
                        .HasForeignKey("DAL.Models.ProjectFile", "ProjectId1");
                });

            modelBuilder.Entity("DAL.Models.Request", b =>
                {
                    b.HasOne("DAL.Models.RequestType")
                        .WithMany("RequestForms")
                        .HasForeignKey("RequestTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
